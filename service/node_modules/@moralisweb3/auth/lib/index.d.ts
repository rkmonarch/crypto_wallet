import * as _moralisweb3_common_core from '@moralisweb3/common-core';
import { ApiModule, Core } from '@moralisweb3/common-core';
import { SolNetworkish, SolAddressish } from '@moralisweb3/common-sol-utils';
import { EvmChainish, EvmAddressish } from '@moralisweb3/common-evm-utils';
import { AptosNetworkInput, AptosAddressInput } from '@moralisweb3/common-aptos-utils';
import { GetAddressesRequest, GetAddressesResponseAdapter, RemoveBindRequest, RemoveBindResponseAdapter, RequestBindRequest, RequestBindResponseAdapter, RequestChallengeEvmRequest, RequestChallengeEvmResponseAdapter, VerifyRemoveBindRequest, VerifyRemoveBindResponseAdapter, VerifyRequestBindRequest, VerifyRequestBindResponseAdapter, RequestChallengeSolanaRequest, RequestChallengeSolanaResponseAdapter, VerifyChallengeEvmResponseAdapter, VerifyChallengeSolanaResponseAdapter, VerifyChallengeAptosResponseAdapter } from '@moralisweb3/common-auth-utils';

interface RequestMessageEvmOptions {
    networkType?: 'evm';
    domain: string;
    chain: EvmChainish;
    address: EvmAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
interface RequestMessageSolOptions {
    networkType: 'solana';
    domain: string;
    /**
     * @deprecated use `network` instead
     */
    solNetwork?: SolNetworkish;
    network: SolNetworkish;
    address: SolAddressish;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
interface RequestMessageAptosOptions {
    networkType: 'aptos';
    domain: string;
    network: AptosNetworkInput;
    address: AptosAddressInput;
    publicKey: string;
    statement?: string;
    uri: string;
    expirationTime?: string;
    notBefore?: string;
    resources?: string[];
    timeout: number;
}
type RequestMessageOptions = RequestMessageEvmOptions | RequestMessageSolOptions | RequestMessageAptosOptions;

interface VerifyEvmOptions {
    networkType?: 'evm';
    /**
     * @deprecated use networkType instead
     */
    network?: 'evm';
    message: string;
    signature: string;
}
interface VerifySolOptions {
    networkType: 'solana';
    /**
     * @deprecated use networkType instead
     */
    network?: 'solana';
    message: string;
    signature: string;
}
interface VerifyAptosOptions {
    networkType: 'aptos';
    message: string;
    signature: string;
}
type VerifyOptions = VerifyEvmOptions | VerifySolOptions | VerifyAptosOptions;

declare const BASE_URL = "https://authapi.moralis.io";
declare class Auth extends ApiModule {
    static readonly moduleName = "auth";
    static create(core?: Core): Auth;
    private constructor();
    setup(): void;
    start(): void;
    readonly evm: {
        getAddresses: (request: GetAddressesRequest) => Promise<GetAddressesResponseAdapter>;
        removeBind: (request: RemoveBindRequest) => Promise<RemoveBindResponseAdapter>;
        requestBind: (request: RequestBindRequest) => Promise<RequestBindResponseAdapter>;
        requestChallengeEvm: (request: RequestChallengeEvmRequest) => Promise<RequestChallengeEvmResponseAdapter>;
        verifyRemoveBind: (request: VerifyRemoveBindRequest) => Promise<VerifyRemoveBindResponseAdapter>;
        verifyRequestBind: (request: VerifyRequestBindRequest) => Promise<VerifyRequestBindResponseAdapter>;
    };
    readonly solana: {
        requestChallengeSol: (request: RequestChallengeSolanaRequest) => Promise<RequestChallengeSolanaResponseAdapter>;
    };
    requestMessage: (options: RequestMessageOptions) => Promise<_moralisweb3_common_core.ResponseAdapter<{
        id: string;
        profileId: string;
        message: string;
    }, {
        id: string;
        profileId: string;
        message: string;
    }>>;
    verify(options: VerifyEvmOptions): Promise<VerifyChallengeEvmResponseAdapter>;
    verify(options: VerifySolOptions): Promise<VerifyChallengeSolanaResponseAdapter>;
    verify(options: VerifyAptosOptions): Promise<VerifyChallengeAptosResponseAdapter>;
}

export { Auth, BASE_URL, RequestMessageEvmOptions, RequestMessageOptions, RequestMessageSolOptions, VerifyEvmOptions, VerifyOptions, VerifySolOptions };
