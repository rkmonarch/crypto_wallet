export type AptosNetwork = ('mainnet' | 'testnet' | 'devnet')[];

export interface Log extends Trigger {
  logIndex: string;
  transactionHash: string;
  address: string;
  data: string;
  topic0: string | null;
  topic1: string | null;
  topic2: string | null;
  topic3: string | null;
}

export interface INativeBalance {
  address: string;
  balance: string;
}

export interface Trigger {
  triggers?: TriggerOutput[];
}

export type TriggerOutput = {
  name: string;
  value: any;
};

export interface InternalTransaction {
  from: string | null;
  to: string | null;
  value: string | null;
  transactionHash: string;
  gas: string | null;
}

export interface Block {
  number: string;
  hash: string;
  timestamp: string;
}

export interface Transaction extends Trigger {
  hash: string;
  gas: string | null;
  gasPrice: string | null;
  nonce: string | null;
  input: string | null;
  transactionIndex: string;
  fromAddress: string;
  toAddress: string | null;
  value: string | null;
  type: string | null;
  v: string | null;
  r: string | null;
  s: string | null;
  receiptCumulativeGasUsed: string | null;
  receiptGasUsed: string | null;
  receiptContractAddress: string | null;
  receiptRoot: string | null;
  receiptStatus: string | null;
}

/**
 * The abi to parse the log object of the contract
 * @example {}
 */
export interface AbiItem {
  anonymous?: boolean;
  constant?: boolean;
  inputs?: AbiInput[];
  name?: string;
  outputs?: AbiOutput[];
  payable?: boolean;
  stateMutability?: string;
  type: string;
  gas?: number;
}

export interface AbiInput {
  name: string;
  type: string;
  indexed?: boolean;
  components?: AbiInput[];
  internalType?: string;
}

export interface AbiOutput {
  name: string;
  type: string;
  components?: AbiOutput[];
  internalType?: string;
}

export interface IParser {
  erc20Transfers: IERC20Transfer[];
  erc20Approvals: IERC20Approval[];
  nftTransfers: INFTTransfer[];
  nativeBalances: INativeBalance[];
  /**
   * @deprecated Will be removed. Use nftTokenApprovals
   */
  nftApprovals: IOldNFTApproval;
  nftTokenApprovals: INFTApproval[];
}

export interface INFTApprovalERC721 extends RootLog, INFTApproval721DecodeLog, INFTMetadata {}

export interface INFTApprovalERC1155 extends RootLog, INFTApprovalForAllDecodeLog, INFTMetadata {}

export interface IOldNFTApproval {
  ERC721: INFTApprovalERC721[];
  ERC1155: INFTApprovalERC1155[];
}

export interface ITinyPayload {
  chainId: string;
  confirmed: boolean;
  block: string;
  records: number;
  retries: number;
}

export interface IWebhookUnParsed {
  block: Block;
  chainId: string;
  logs: Log[];
  txs: Transaction[];
  txsInternal: InternalTransaction[];
  abi: AbiItem[];
  retries: number;
  confirmed: boolean;
  tag: string;
  streamId: string;
}

export interface IWebhook extends IWebhookUnParsed, IParser {}

export interface RootLog {
  transactionHash: string;
  contract: string;
  logIndex: string;
}

export interface IERC20TransferDecodeLog {
  from: string;
  to: string;
  value: string;
}

export interface IERC20Transfer extends RootLog, IERC20TransferDecodeLog, IERC20Metadata, Trigger {}

export interface IERC20ApprovalDecodeLog {
  owner: string;
  spender: string;
  value: string;
}

export interface IERC20Approval extends RootLog, IERC20ApprovalDecodeLog, IERC20Metadata, Trigger {}

export interface INFTTransfer721DecodeLog {
  from: string;
  to: string;
  tokenId: string;
}

export interface INFTTransfer1155SingleDecodeLog {
  operator: string;
  from: string;
  to: string;
  id: string;
  value: string;
}

export interface INFTTransfer1155BatchDecodeLog {
  operator: string;
  from: string;
  to: string;
  ids: string[];
  values: string[];
}

export interface INFTTransfer extends RootLog, INFTMetadata, Trigger {
  operator: string | null;
  from: string;
  to: string;
  tokenId: string;
  amount: string;
}

export interface INFTApprovalForAllDecodeLog {
  account: string;
  operator: string;
  approved: boolean;
}

export interface INFTApproval721DecodeLog {
  owner: string;
  approved: string;
  tokenId: string;
}

export interface INFTApproval extends RootLog, INFTMetadata {
  contract: string;
  account: string;
  operator: string;
  approvedAll: boolean;
  tokenId: string | null;
}

export interface IERC20Metadata {
  tokenDecimals: string;
  tokenName: string;
  tokenSymbol: string;
  valueWithDecimals?: string;
}

export interface INFTMetadata {
  tokenContractType: string;
  tokenName: string;
  tokenSymbol: string;
}

type AptosCoin = {
  name: string;
  decimals: number;
  symbol: string;
};

type AptosCoinTransfer = {
  coin: AptosCoin;
  to: string;
  value: string;
  from: string;
  valueWithDecimals: number;
  transaction: string;
};

type AptosBlock = {
  number: string;
  timestamp: string;
  hash: string;
  firstVersion: string;
  lastVersion: string;
};

type AptosTransaction = {
  hash: string;
  success: boolean;
  sender: string;
  gasLimit: string;
  stateChangeHash: string;
  eventChangeHash: string;
  gasUsed: string;
  type: string;
  gasUnitPrice: string;
};

type AptosCoinDeposit = {
  value: string;
  address: string;
  coin: AptosCoin;
  valueWithDecimals: string;
  sequenceNumber: string;
};

type AptosCoinWithdrawal = {
  value: string;
  address: string;
  coin: AptosCoin;
  valueWithDecimals: string;
  sequenceNumber: string;
};

export interface AptosWebhook {
  block: AptosBlock;
  changes: any[];
  coinDeposits: AptosCoinDeposit[];
  coinTransfers: AptosCoinTransfer[];
  coinWithdrawals: AptosCoinWithdrawal[];
  events: any[];
  network: AptosNetwork[number];
  payloads: any[];
  retries: number;
  streamId: string;
  tag: string;
  transactions: AptosTransaction[];
}
