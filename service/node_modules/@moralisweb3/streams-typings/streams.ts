import { AbiItem } from './index';

/**
 * The stream status:
 * [active] The Stream is healthy and processing blocks
 * [paused] The Stream is paused and is not processing blocks
 * [error] The Stream has encountered an error and is not processing blocks
 * @example {}
 */
export enum StreamsStatus {
  active = 'active',
  paused = 'paused',
  error = 'error',
  terminated = 'terminated',
}

export type AptosNetwork = ('mainnet' | 'testnet' | 'devnet')[];

export type AptosCreateStreamType = {
  /**
   * Include events for all addresses (only applied when at least one event or function is provided)
   */
  allAddresses?: boolean;
  /**
   * Indicator if it is a demo stream
   */
  demo?: boolean;
  /**
   * A description for this stream
   */
  description: string;
  /**
   * Include or not raw changes for every transaction in webhook defaults to false
   */
  includeChanges?: boolean;
  /**
   * Include or not events in webhook defaults to false
   */
  includeEvents?: boolean;
  /**
   * Include or not payload for every transaction in webhook defaults to false
   */
  includePayload?: boolean;
  /**
   * The network to listen to
   * @example ['mainnet']
   */
  network: AptosNetwork;
  /**
   * An Array of events in string-signature format ex: ['0x1::coin::WithdrawEvent']
   */
  events?: string[];
  /**
   * An Array of events in string-signature format ex: ['0x1::aptos_account::transfer']
   */
  functions?: string[];
  /**
   * A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present
   */
  tag: string;
  /**
   * Webhook URL where moralis will send the POST request.
   */
  webhookUrl: string;
};

/**
 * Stringified UUIDv4.
 * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
 * @pattern [0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}
 * @format uuid
 */
export type UUID = string;

export interface StreamsModelCreate {
  /**
   * Webhook URL where moralis will send the POST request.
   */
  webhookUrl: string;
  /**
   * A description for this stream
   */
  description: string;
  /**
   * A user-provided tag that will be send along the webhook, the user can use this tag to identify the specific stream if multiple streams are present
   */
  tag: string;
  /**
   * An Array of topic0's in string-signature format ex: ['FunctionName(address,uint256)']
   */
  topic0?: string[] | null;
  /**
   * Include events for all addresses (only applied when abi and topic0 is provided)
   */
  allAddresses?: boolean;
  /**
   * Include or not native transactions defaults to false
   */
  includeNativeTxs?: boolean;
  /**
   * Include or not logs of contract interactions defaults to false
   */
  includeContractLogs?: boolean;
  /**
   * Include or not include internal transactions defaults to false
   */
  includeInternalTxs?: boolean;
  /**
   * Include native balances for each address in the webhook
   */
  getNativeBalances?: getNativeBalances[];
  abi?: AbiItem[] | null;
  advancedOptions?: advancedOptions[] | null;
  /**
   * The ids of the chains for this stream in hex Ex: ["0x1","0x38"]
   */
  chainIds: string[];
  /**
   * Indicator if it is a demo stream
   */
  demo?: boolean;
  /**
   * triggers
   */
  triggers?: StreamsTrigger[] | null;
}

export interface getNativeBalances {
  selectors: string[];
  type: StreamsTrigger['type'] | 'internalTx';
}

export interface StreamsModel extends StreamsModelCreate {
  /**
   * The unique uuid of the stream
   */
  id: UUID;
  /**
   * The status of the stream.
   */
  status: StreamsStatus;
  /**
   * Description of current status of stream.
   */
  statusMessage: string;
}

export interface StreamsResponse {
  /**
   * Array of project Streams
   */
  result: StreamsModel[];
  /**
   * Cursor for fetching next page
   */
  cursor?: string;
  /**
   * Total count of streams on the project
   */
  total: number;
}

/**
 * Advanced Options for each specific topic
 */
export interface advancedOptions {
  topic0: string;
  filter?: StreamsFilter;
  includeNativeTxs?: boolean;
}

/**
 * Trigger
 */
export interface StreamsTrigger {
  type: 'tx' | 'log' | 'erc20transfer' | 'erc20approval' | 'nfttransfer';
  contractAddress: string;
  inputs?: (string | any[])[];
  functionAbi: AbiItem;
  topic0?: string;
  callFrom?: string;
}

/**
 * The filter object for the topic0
 * https://docs.moralis.io/docs/filter-streams
 * @example {}
 */
export interface StreamsFilter {
  [key: string]: any;
}

export interface StreamsStatusUpdate {
  /**
   * The status of the stream.
   */
  status: StreamsStatus;
}
