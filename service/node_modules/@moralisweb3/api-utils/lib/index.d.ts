import { ConfigKey, Operation, Core, ResponseAdapter, PaginatedRequest, PaginatedOperation, PaginatedResponseAdapter, OperationV3, Pagination, Module } from '@moralisweb3/common-core';

declare const ApiUtilsConfig: {
    apiKey: ConfigKey<string | null>;
};

interface ApiUtilsConfigValues {
    apiKey: string;
}

type EndpointMethod = 'get' | 'post' | 'put' | 'delete';
interface EndpointDescriptor {
    name: string;
    urlPatternParamNames: string[];
    urlPattern: string;
    bodyParamNames: string[];
    method: EndpointMethod;
}

declare function convertOperationToDescriptor(operation: Operation<any, any, any, any>): EndpointDescriptor;

type Headers = {
    [key: string]: string;
};
/**
 * Additional data for the api to specify SDK details of the request
 */
declare const getSdkDetailsHeaders: (product?: string) => Headers;

declare class OperationResolver<Request, JSONRequest, Response, JSONResponse> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: Operation<Request, JSONRequest, Response, JSONResponse>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<ResponseAdapter<Response, JSONResponse>>;
}

declare class NullableOperationResolver<Request, JSONRequest, Response, JSONResponse> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: Operation<Request, JSONRequest, Response, JSONResponse>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<ResponseAdapter<Response, JSONResponse> | null>;
    private _fetch;
}

declare class PaginatedOperationResolver<Request extends PaginatedRequest, JSONRequest, Result, JSONResult> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestValidator;
    private readonly requestBuilder;
    private readonly requestController;
    constructor(operation: PaginatedOperation<Request, JSONRequest, Result, JSONResult>, baseUrl: string, core: Core);
    readonly fetch: (request: Request) => Promise<PaginatedResponseAdapter<Result, JSONResult>>;
}

type UnknownNullableOperationResolver = NullableOperationResolver<unknown, unknown, unknown, unknown>;
type UnknownPaginatedOperationResolver = PaginatedOperationResolver<any, unknown, unknown, unknown>;
type UnknownDefaultOperationResolver = OperationResolver<unknown, unknown, unknown, unknown>;
type UnknownOperationResolver = UnknownNullableOperationResolver | UnknownPaginatedOperationResolver | UnknownDefaultOperationResolver;

interface PaginatedResponseV3<Result> {
    readonly total?: number;
    readonly page?: number;
    readonly pageSize?: number;
    readonly result?: Result;
    readonly cursor?: string;
}
interface PaginatedResponseV3JSON {
    readonly cursor?: string;
}

type BaseUrlOrResolver<Request> = string | ((request: Request) => string);
declare class OperationV3Resolver<Request, RequestJSON, Response, ResponseJSON, Body, BodyJSON> {
    private readonly operation;
    private readonly baseUrl;
    private readonly core;
    private readonly requestController;
    constructor(operation: OperationV3<Request, RequestJSON, Response, ResponseJSON, Body, BodyJSON>, baseUrl: BaseUrlOrResolver<Request>, core: Core);
    request(request: Request, body: Body): Promise<{
        response: Response;
        responseJson: ResponseJSON;
    }>;
    resolve(request: Request, body: Body): Promise<Response>;
    /**
     * @deprecated This method is dedicated to V2 API only.
     */
    fetch(request: Request, body: Body): Promise<ResponseAdapter<Response, ResponseJSON>>;
    private resolveBaseUrl;
    private prepareHeaders;
}

type PaginatedResponseV3AdapterNextHandler<Response extends PaginatedResponseV3<Response['result']>, ResponseJSON> = () => Promise<PaginatedResponseV3Adapter<Response, ResponseJSON>>;
declare class PaginatedResponseV3Adapter<Response extends PaginatedResponseV3<Response['result']>, ResponseJSON> {
    readonly response: Response;
    private readonly json;
    private readonly nextHandler;
    constructor(response: Response, json: ResponseJSON, nextHandler: PaginatedResponseV3AdapterNextHandler<Response, ResponseJSON> | null);
    get result(): NonNullable<Response['result']>;
    get pagination(): Pagination;
    hasNext(): boolean;
    next(): Promise<PaginatedResponseV3Adapter<Response, ResponseJSON>>;
    /**
     * @deprecated Use `toJSON()` method from the result.
     */
    raw(): ResponseJSON;
    /**
     * @deprecated Use `toJSON()` method from the result.
     */
    toJSON(): ResponseJSON;
}

declare class PaginatedOperationV3Resolver<Request, RequestJSON, Response extends PaginatedResponseV3<Response['result']>, ResponseJSON extends PaginatedResponseV3JSON, Body, BodyJSON> {
    private readonly resolver;
    constructor(operation: OperationV3<Request, RequestJSON, Response, ResponseJSON, Body, BodyJSON>, baseUrl: BaseUrlOrResolver<Request>, core: Core);
    /**
     * @deprecated This method is dedicated to V2 API only.
     */
    fetch(request: Request, body: Body): Promise<PaginatedResponseV3Adapter<Response, ResponseJSON>>;
}

declare class ApiUtils extends Module {
    static readonly moduleName = "api";
    static create(core?: Core): ApiUtils;
    constructor(core: Core);
    setup(): void;
    start(): void | Promise<void>;
}

export { ApiUtils, ApiUtilsConfig, ApiUtilsConfigValues, BaseUrlOrResolver, EndpointDescriptor, EndpointMethod, Headers, NullableOperationResolver, OperationResolver, OperationV3Resolver, PaginatedOperationResolver, PaginatedOperationV3Resolver, PaginatedResponseV3, PaginatedResponseV3Adapter, PaginatedResponseV3AdapterNextHandler, PaginatedResponseV3JSON, UnknownDefaultOperationResolver, UnknownNullableOperationResolver, UnknownOperationResolver, UnknownPaginatedOperationResolver, convertOperationToDescriptor, getSdkDetailsHeaders };
